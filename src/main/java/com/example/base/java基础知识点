美团面试问到的问题：
    1、springBoot中spi机制
    2、afterRefresh()的作用
    3、深克隆和浅克隆
        浅克隆含义：对于基本数据类型来说，最直接将要克隆的值复制给新生成的对象，但是对于引用类型的对象来说的话，克隆之后的对象是这个对象的引用，
        这两个引用地址一样,都指向同一个对象。
        实现步骤：
               1、实现java.lang.Cloneable接口
               2、重写java.lang.Object.clone方法
        如何深克隆呢？
            如果的对象的属性是引用类型的话，则这个引用类型的属性也要
               1、实现java.lang.Cloneable接口
               2、重写java.lang.Object.clone方法
       通过序列化来实现深克隆，但是序列化的过程中可能会出现问题，

        虽然Java的序列化非常简单、强大，但是要用好，还有很多地方需要注意。
        比如曾经序列化了一个对象，可由于某种原因，该类做了一点点改动，然后重新被编译，那么这时反序列化刚才的对象，将会出现异常。
        你可以通过添加serialVersionUID属性来解决这个问题


    4、http的返回值的代表的含义(401 402 403)
    5、jdk7的hashMap和jdk8的hashMap的区别
    6、数组扩容的机制
    7、Java的异常体系
    8、算法题
    9、mysql的存储引擎的对比
    10、深拷贝和浅拷贝




JDK、JRE、JVM 分别是什么关系？
lambda表达式和集合的流式操作
Java类是单继承的
Java是编译执行的语言还是解释执行的语言？
.java文件--> .class文件是编译的，  .class文件--> 机器码是解释执行

基本的数据类型：
    byte short int long char boolean float double

值传递和引用传递  ***
不可以在static的环境中访问非static的变量
String被final修饰 并且底层使用char[]实现

基本数据类型都是通过==进行比较的,
引用数据类型：
    == 判断引用所指的对象是否是同一个。
    equals是Object的一个方法,有些类会覆盖这个方法，用于判断对象的内同是否相等。


对于不想进行序列化的变量，使用transient关键字修饰。

常见的运行时异常:
    空指针异常
    数组下标越界异常
    类转换异常


    error：

    exception：

    可查异常：编译器要求必须处理的异常。正确的程序在运行过程中，经常容易出现的、符合预期的异常情况。一旦发生此类异常，就必须采用某种方式进行处理。除RuntimeException及其子类外，其他的Exception异常都属于可查异常。编译器会检查此类异常，也就是说当编译器检查到应用中的某处可能会此类异常时，将会提示你处理本异常——要么使用try-catch捕获，要么使用throws语句抛出，否则编译不通过。
    不可查异常：编译器不会进行检查并且不要求必须处理的异常，也就说当程序中出现此类异常时，
                即使我们没有try-catch捕获它，也没有使用throws抛出该异常，编译也会正常通过。
                该类异常包括运行时异常（RuntimeException极其子类）和错误（Error）。



Java 对象创建的方式？
    使用 new 关键字创建对象。
    使用 Class 类的 newInstance 方法(反射机制)。
    使用 Constructor 类的 newInstance 方法(反射机制)。
    使用 clone 方法创建对象。
    使用(反)序列化机制创建对象。




泛型的优点：
    提供了一个可以容纳的对象类型
    如果你添加其他类型的任何元素，会在编译期报错，避免了在运行时出现类转换异常。
    不需要显示的使用instanceOf来判断类的类型。

Java集合根接口：
    Collection

